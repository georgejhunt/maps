{"version":3,"sources":["map_functions.js"],"names":["regionGeojson","regionDict","regionList","consoleJsonDir","onChangeFunc","$","document","readBoundingBox","checkbox","console","log","ajax","type","url","dataType","done","data","key","push","renderRegionList","fail","jsonErrhandler","html","regions","sort","a","b","seq","forEach","region","index","title","genRegionItem","name","itemId","ksize","size","readableSize","instMapItem","command","cmd_args","cmd","JSON","stringify","sendCmdSrvCmd","genericCmdHandler","mapDownloading","jqXHR","textStatus","errorThrown","displayServerCommandStatus","consoleLog","kbytes","bytes","e","Math","floor","pow","toFixed","totalSpace","sum","each","ind","elem","parse","attr","parseInt","find","prop","refreshBoxLayer","map","render"],"mappings":";AAEA,IAAIA,EAAgB,GAChBC,EAAa,GACbC,EAAa,GACbC,EAAiB,kBACjBC,EAAe,UACfC,EAAIC,SAASD,EAKjB,SAASE,EAAgBC,GACtBA,EAAWA,IAAY,EACzBC,QAAQC,IAAK,gCAAkCF,GACnCH,EAAEM,KAAK,CAChBC,KAAM,MACNC,IAAKV,EAAiB,eACtBW,SAAU,SAEXC,KAAK,SAAUC,GAGV,IAAA,IAAIC,KADRhB,GADAD,EAAgBgB,GACU,QAExBP,QAAQC,IAAIO,EAAM,KAAOhB,EAAWgB,GAAX,OACzBhB,EAAWgB,GAAX,KAA0BA,EAC1Bf,EAAWgB,KAAKjB,EAAWgB,IAE7BE,EAAiBX,KAElBY,KAAKC,GAGR,SAASF,EAAiBX,GACrBc,IAAAA,EAAO,GAELC,EAAUrB,EAChBO,QAAQC,IAAK,uBAGZa,EAAUA,EAAQC,KAAK,SAASC,EAAEC,GAC5BD,OAAAA,EAAEE,IAAMD,EAAEC,KAAa,EACf,IAEdlB,QAAQC,IAAIa,GAEXD,GAAQ,SACVC,EAAQK,QAAQ,SAACC,EAAQC,GACpBrB,QAAQC,IAAImB,EAAOE,MAAQ,IAAKF,EAAOF,KACvCL,GAAQU,EAAcH,EAAOrB,KAEjCc,GAAQ,UACRb,QAAQC,IAAIY,GACZjB,EAAG,eAAgBiB,KAAKA,GAK1B,SAASU,EAAcH,EAAOrB,GACxBc,IAAAA,EAAO,GACXb,QAAQC,IAAI,qBAAuBmB,EAAOI,MACtCC,IAAAA,EAASL,EAAOE,MAChBI,EAAQN,EAAOO,KAAO,IAenBd,OAdTb,QAAQC,IAAIY,GACVA,GAAQ,8CAAgDO,EAAOI,KAAO,MACtEX,GAAQ,WACHd,IACDc,GAAQ,uCACRA,GAAQ,iCAERA,GAAQY,EACP1B,IAAac,GAAS,YAC3BA,GAAQ,WACRA,GAAQ,UAAYe,EAAaF,GACjCb,GAAQ,SACVb,QAAQC,IAAIY,GAEHA,EAGT,SAASgB,EAAYL,GACfM,IACAC,EAAW,GAMR,OALPA,EAAQ,YAAkBP,EAC1BQ,IAAMF,qBAAgBG,KAAKC,UAAUH,GACrCI,cAAcH,IAAKI,mBACnBC,eAAe5B,KAAKe,IAEb,EAGT,SAASZ,EAAgB0B,EAAOC,EAAYC,GAYnC,MATW,aAAdD,GAEFE,2BAA2B,oBAAsBF,EAAa,KAAOC,GAGvEE,WAAWH,GACXG,WAAWF,GACXE,WAAWJ,IAEJ,EAGT,SAASV,EAAae,GAChBA,GAAU,GAAVA,EACJ,MAAO,IACHC,IAAAA,EAAQ,KAAOD,EAEfE,EAAIC,KAAKC,MAAMD,KAAK7C,IAAI2C,GAASE,KAAK7C,IAAI,OACvC,OAAC2C,EAAQE,KAAKE,IAAI,KAAMH,IAAII,QAAQ,GAAK,IAFxC,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,MAEcJ,GAG1D,SAASK,IACHC,IAAAA,EAAM,EACVvD,EAAG,YAAawD,KAAK,SAASC,EAAIC,GAC5B/C,IACAa,EADOa,KAAKsB,MAAM3D,EAAE,MAAM4D,KAAK,gBACjBhC,KACdG,EAAO8B,SAASjE,EAAW4B,GAAX,MACqC,GAA/CxB,EAAG,MAAO8D,KAAK,aAAaC,KAAK,iBAChB,IAAThC,IACdwB,GAAOxB,KAERD,IAAAA,EAAQyB,EAAM,IACnBvD,EAAG,iBAAkBiB,KAAKe,EAAaF,IAEzC,SAASkC,IACNC,IAAIC,SAGPhE,GAAgB","file":"map_functions.ab31d89c.js","sourceRoot":"..","sourcesContent":["// map_functions.js\n// copyright 2019 George Hunt\nvar regionGeojson = {};\nvar regionDict = {};\nvar regionList = [];\nvar consoleJsonDir = '/common/assets/';\nvar onChangeFunc = \"setSize\";\nvar $ = document.$;\n\n//var jquery = require(\"./jquery.min\");\n//window.$ = window.jQuery = jquery;\n\nfunction readBoundingBox(checkbox){\n   checkbox = checkbox && true;\n\tconsole.log (\"in readBoundingBox. checkbox:\" + checkbox);\n  var resp = $.ajax({\n    type: 'GET',\n    url: consoleJsonDir + 'regions.json',\n    dataType: 'json'\n  })\n  .done(function( data ) {\n  \t regionGeojson = data;\n    regionDict = regionGeojson['regions'];\n    for(var key in regionDict){\n      console.log(key + '  ' + regionDict[key]['title']);\n      regionDict[key]['name'] = key;\n      regionList.push(regionDict[key]);\n    }\n    renderRegionList(checkbox);\n  })\n  .fail(jsonErrhandler);\n}\n\nfunction renderRegionList(checkbox) { // generic\n\tvar html = \"\";\n   // order the regionList by seq number\n   var regions = regionList;\n\tconsole.log (\"in renderRegionList\");\n\n\t// sort on basis of seq\n  regions = regions.sort(function(a,b){\n    if (a.seq < b.seq) return -1;\n    else return 1;\n    });\n  console.log(regions);\n\t// render each region\n   html += '<form>';\n\tregions.forEach((region, index) => { // now render the html\n      console.log(region.title + \" \" +region.seq);\n      html += genRegionItem(region,checkbox);\n  });\n  html += '</form>';\n  console.log(html);\n  $( \"#regionlist\" ).html(html);\n}\n\n//readBoundingBox();\n\nfunction genRegionItem(region,checkbox) {\n  var html = \"\";\n  console.log(\"in genRegionItem: \" + region.name);\n  var itemId = region.title;\n  var ksize = region.size / 1000;\nconsole.log(html);\n  html += '<div  class=\"extract\" data-region={\"name\":\"' + region.name + '\"}>';\n  html += ' <label>';\n  if ( checkbox ) {\n      html += '<input type=\"checkbox\" name=\"region\"';\n      html += ' onChange=\"totalSpace(this)\">';\n  }\n      html += itemId;\n  if ( checkbox ) { html +=  '</input>';};\n  html += '</label>'; // end input\n  html += ' Size: ' + readableSize(ksize);\n  html += '</div>';\nconsole.log(html);\n\n  return html;\n}\n\nfunction instMapItem(name) {\n  var command = \"INST-OSM-VECT-SET\";\n  var cmd_args = {};\n  cmd_args['osm_vect_id'] = name;\n  cmd = command + \" \" + JSON.stringify(cmd_args);\n  sendCmdSrvCmd(cmd, genericCmdHandler);\n  mapDownloading.push(name);\n  //renderOer2goCatalog();\n  return true;\n}\n\nfunction jsonErrhandler (jqXHR, textStatus, errorThrown)\n{\n  // only handle json parse errors here, others in ajaxErrHandler\n  if (textStatus == \"parserror\") {\n    //alert (\"Json Errhandler: \" + textStatus + \", \" + errorThrown);\n    displayServerCommandStatus(\"Json Errhandler: \" + textStatus + \", \" + errorThrown);\n  }\n  //consoleLog(\"In Error Handler logging jqXHR\");\n  consoleLog(textStatus);\n  consoleLog(errorThrown);\n  consoleLog(jqXHR);\n\n  return false;\n}\n\nfunction readableSize(kbytes) {\n  if (kbytes == 0)\n  return \"0\";\n  var bytes = 1024 * kbytes;\n  var s = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n  var e = Math.floor(Math.log(bytes) / Math.log(1024));\n  return (bytes / Math.pow(1024, e)).toFixed(2) + \" \" + s[e];\n}\n\nfunction totalSpace(){\n  var sum = 0;\n  $( \".extract\" ).each(function(ind,elem){\n    var data = JSON.parse($(this).attr('data-region'));\n    var region = data.name;\n    var size = parseInt(regionDict[region]['size']);\n    var chk = $( this ).find(':checkbox').prop(\"checked\") == true;\n    if (chk && typeof size !== 'undefined')\n        sum += size;\n    });\n   var ksize = sum / 1000;\n  $( \"#osmDiskSpace\" ).html(readableSize(ksize));\n}\nfunction refreshBoxLayer(){\n   map.render();\n}\n// apply the html for region list\nreadBoundingBox(false);\n"]}